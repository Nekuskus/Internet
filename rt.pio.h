// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------- //
// transfer //
// -------- //

#define transfer_wrap_target 0
#define transfer_wrap 17

static const uint16_t transfer_program_instructions[] = {
            //     .wrap_target
    0x6062, //  0: out    null, 2                    
    0x80a0, //  1: pull   block                      
    0xe029, //  2: set    x, 9                       
    0xa042, //  3: nop                               
    0xa042, //  4: nop                               
    0xa042, //  5: nop                               
    0x000f, //  6: jmp    15                         
    0xa042, //  7: nop                               
    0xa042, //  8: nop                               
    0xa042, //  9: nop                               
    0xa042, // 10: nop                               
    0xa042, // 11: nop                               
    0xa042, // 12: nop                               
    0xa042, // 13: nop                               
    0xa042, // 14: nop                               
    0x6003, // 15: out    pins, 3                    
    0x0047, // 16: jmp    x--, 7                     
    0x0000, // 17: jmp    0                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program transfer_program = {
    .instructions = transfer_program_instructions,
    .length = 18,
    .origin = -1,
};

static inline pio_sm_config transfer_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + transfer_wrap_target, offset + transfer_wrap);
    sm_config_set_sideset(&c, 4, true, false);
    return c;
}
#endif

// ------- //
// receive //
// ------- //

#define receive_wrap_target 0
#define receive_wrap 6

static const uint16_t receive_program_instructions[] = {
            //     .wrap_target
    0xe029, //  0: set    x, 9                       
    0x0403, //  1: jmp    3                      [4] 
    0xa742, //  2: nop                           [7] 
    0x4003, //  3: in     pins, 3                    
    0x0042, //  4: jmp    x--, 2                     
    0x8020, //  5: push   block                      
    0x0000, //  6: jmp    0                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program receive_program = {
    .instructions = receive_program_instructions,
    .length = 7,
    .origin = -1,
};

static inline pio_sm_config receive_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + receive_wrap_target, offset + receive_wrap);
    return c;
}

	static inline void transfer_program_init(PIO pio, uint sm, uint offset, uint pin) {
		pio_sm_config c = transfer_program_get_default_config(offset);	
		sm_config_set_clkdiv(&c, 25);
		sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
		sm_config_set_out_pins(&c, pin, 3);
		sm_config_set_sideset_pins(&c, pin);
		//true: output, false: input
		pio_sm_set_consecutive_pindirs(pio, sm, pin, 3, true);
		sm_config_set_out_special(&c, true, false, pin);
		sm_config_set_out_special(&c, true, false, pin+1);
		sm_config_set_out_special(&c, true, false, pin+2);
		pio_gpio_init(pio, pin);
		pio_gpio_init(pio, pin + 1);
		pio_gpio_init(pio, pin + 2);
		pio_sm_init(pio, sm, offset, &c);
		pio_sm_set_enabled(pio, sm, true);
	}
	static inline void receive_program_init(PIO pio, uint sm, uint offset, uint pin) {
		pio_sm_config c = receive_program_get_default_config(offset);	
		sm_config_set_clkdiv(&c, 25);
		sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
		sm_config_set_in_pins(&c, pin);
		sm_config_set_in_pins(&c, pin+1);
		sm_config_set_in_pins(&c, pin+2);
		//true: output, false: input
		pio_sm_set_consecutive_pindirs(pio, sm, pin, 3, false);
		pio_gpio_init(pio, pin);
		pio_gpio_init(pio, pin + 1);
		pio_gpio_init(pio, pin + 2);
		pio_sm_init(pio, sm, offset, &c);
		pio_sm_set_enabled(pio, sm, true);
	}

#endif
